/*
 * $Id: ComponentFactoryTest.java,v 1.31 2001/10/10 08:14:29 vladz Exp $
 *
 * Generated by Together
 */

package com.developmentontheedge.beans;

import com.developmentontheedge.beans.model.ArrayProperty;
import com.developmentontheedge.beans.model.ComponentFactory;
import com.developmentontheedge.beans.model.ComponentModel;
import com.developmentontheedge.beans.model.Property;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;
import junit.textui.TestRunner;

import java.awt.*;

public class ComponentFactoryTest extends TestCase
{
    static SimplePropertyContainer simpleBean;
    static ComponentModel model = null;
    static String simpleBeanName = null;
    static String dynamicBeanName = null;

    public ComponentFactoryTest( String name )
    {
        super( name );
    }

    protected void checkProperty( String propertyName, Class type, Object value, boolean isReadOnly )
        throws NoSuchMethodException
        {
            String msg = "Property <" + propertyName + "> ";
            Property property = model.findProperty( propertyName );

            assertNotNull( msg + "not found", property );
            assertEquals( msg + "getName() is incorrect", propertyName, property.getName() );
            assertNotNull( msg + "value is null", property.getValue() );
            assertEquals( msg + "type is wrong", property.getValueClass(), type );
            assertEquals( msg + "value is correct", property.getValue(), value );
            assertEquals( msg + "read-only flag incorrect", isReadOnly, property.isReadOnly() );
    }

    public void testArrayProperties() throws Exception
    {
        model = ComponentFactory.getModel(
            new SimplePropertyContainer() );
        Property prop = model.findProperty( "arrayProperty" );
        assertNotNull( "array property cannot be found", prop );
        assertEquals( "array property is not instance of ArrayProperty", ArrayProperty.class,
            prop.getClass() );
            ArrayProperty array = ( ArrayProperty )prop;
        assertEquals( "array property has correct number of elements:", 2,
            array.getPropertyCount() );
            assertEquals( "array property element has correct class:", String.class,
            array.getItemClass() );
            assertEquals( "array property has correct element #0", "Value 1",
            array.getPropertyAt( 0 ).getValue() );
            assertEquals( "array property has correct element #1", "Value 2",
            array.getPropertyAt( 1 ).getValue() );
            assertNull( "array property must not contain element #2",
            array.getPropertyAt( 2 ) );
            assertNotNull( "Array property's first value is not found via complete name",
            model.findProperty( "arrayProperty/[0]" ) );
    }

    public void testDynamicArrayProperties() throws Exception
    {
/*        IndexedPropertyDescriptorEx pd = new IndexedPropertyDescriptorEx( "arrayProperty" );
        Property dyn = model.findProperty( "myProperties" );
        DynamicPropertySet set = ( DynamicPropertySet )dyn.getValue();
        set.add( pd );
        set.setValue( "arrayProperty",
            new String[] { "Value 1", "Value 2" } );
        assertEquals( "correct propertyDescriptors array size",
            new Integer( 2 ),
            new Integer( set.getPropertyDescriptors().length ) ); // stringProperty and arrayProperty

        ComponentFactory.recreateChildProperties( model );
        dyn = model.findProperty( "myProperties" );
        assertNotNull( "Property containing dynamic properties exists after adding array property", dyn );
        assertEquals( "dynamic property container has correct count",
            new Integer( 2 ),
            new Integer( dyn.getPropertyCount() ) );
        ArrayProperty array = ( ArrayProperty )dyn.findProperty( "arrayProperty" );
        assertEquals( "array property has correct number of elements:",
            new Integer( 2 ),
            new Integer( array.getPropertyCount() ) );
        assertEquals( "array property element has correct class:", String.class, array.getItemClass() );
        assertEquals( "array property has correct element #0", "Value 1", array.getPropertyAt( 0 ).getValue() );
        assertEquals( "array property has correct element #1", "Value 2", array.getPropertyAt( 1 ).getValue() );
        assertNull( "array property must not contain element #2", array.getPropertyAt( 2 ) );
        assertNotNull( "Dynamically added array property's first value is not found via complete name",
        model.findProperty( "myProperties/arrayProperty/[0]" ) );
*/
    }

    public void testCreateFromJar() throws Exception
    {
        ComponentFactory.loadComponents( "com/beanexplorer/_test/jars", "" );
        ComponentModel timer = ComponentFactory.getModel( "Timer" );
        this.assertNotNull( "Cannot create ComponentModel", timer );
        //this.assertNotNull( "Timer component has no icon", timer.getIcon() );
        //TODO assertEquals( "Timer component has wrong number of properties:", 2, timer.getPropertyCount() );
    }

    public static Test suite()
    {
        TestSuite suite = new TestSuite( ComponentFactoryTest.class );
//        suite.addTest(
//            new ComponentFactoryTest( "testArrayProperties" ) );
//        suite.addTest(
//            new ComponentFactoryTest( "testDynamicArrayProperties" ) );
//        suite.addTest(
//            new ComponentFactoryTest( "testCreateFromJar" ) );
        return suite;
    }

    public static class SimplePropertyContainer
    {
        protected String[] array = { "Value 1", "Value 2" };

        // dummy comment
        public SimplePropertyContainer()
        {
        }

        public String getStringProperty() { return "stringValue"; }

        public void setStringProperty( String value ) { }

        public boolean getBooleanProperty() { return true; }

        public int getIntegerProperty() { return 20; }

        Color color = Color.pink;

        public Color getColorProperty() { return color; }

        public void setColorProperty( Color color ) { this.color = color; }

        public String[] getArrayProperty()
        {
            return array;
        }

    }


    public static class DynamicPropertyContainer
    {
        private DynamicPropertySetSupport properties;

        // dummy comment
        public DynamicPropertyContainer()
        {
            properties = new DynamicPropertySetSupport();
        }

        public String getName() { return "DynamicPropertyContainer"; }

        public DynamicPropertySet getMyProperties() { return properties; }
    }


    public static void main( String[] args )
    {
        TestRunner.run( suite() );

/*
        try
        {
            ComponentFactoryTest test = new ComponentFactoryTest("");
            test.testCreateSimpleModel();
            test.testSimpleProperties();
            test.testSimplePropertiesView();
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
*/
    }
}
